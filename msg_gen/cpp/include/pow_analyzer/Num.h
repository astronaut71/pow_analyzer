/* Auto-generated by genmsg_cpp for file /home/bojan/ros_workspace/utils/pow_analyzer/msg/Num.msg */
#ifndef POW_ANALYZER_MESSAGE_NUM_H
#define POW_ANALYZER_MESSAGE_NUM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace pow_analyzer
{
template <class ContainerAllocator>
struct Num_ {
  typedef Num_<ContainerAllocator> Type;

  Num_()
  : std_dev_yaw(0.0)
  , std_dev_lin_v(0.0)
  , avg_lin_v(0.0)
  , dist_tot(0.0)
  , dist_tot1(0.0)
  , time(0.0)
  , idle_time(0.0)
  , min_range(0.0)
  {
  }

  Num_(const ContainerAllocator& _alloc)
  : std_dev_yaw(0.0)
  , std_dev_lin_v(0.0)
  , avg_lin_v(0.0)
  , dist_tot(0.0)
  , dist_tot1(0.0)
  , time(0.0)
  , idle_time(0.0)
  , min_range(0.0)
  {
  }

  typedef double _std_dev_yaw_type;
  double std_dev_yaw;

  typedef double _std_dev_lin_v_type;
  double std_dev_lin_v;

  typedef double _avg_lin_v_type;
  double avg_lin_v;

  typedef double _dist_tot_type;
  double dist_tot;

  typedef double _dist_tot1_type;
  double dist_tot1;

  typedef double _time_type;
  double time;

  typedef double _idle_time_type;
  double idle_time;

  typedef double _min_range_type;
  double min_range;


  typedef boost::shared_ptr< ::pow_analyzer::Num_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pow_analyzer::Num_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Num
typedef  ::pow_analyzer::Num_<std::allocator<void> > Num;

typedef boost::shared_ptr< ::pow_analyzer::Num> NumPtr;
typedef boost::shared_ptr< ::pow_analyzer::Num const> NumConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pow_analyzer::Num_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pow_analyzer::Num_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pow_analyzer

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pow_analyzer::Num_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pow_analyzer::Num_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pow_analyzer::Num_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ce8042f31a98db19f0abcae6805fa07a";
  }

  static const char* value(const  ::pow_analyzer::Num_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xce8042f31a98db19ULL;
  static const uint64_t static_value2 = 0xf0abcae6805fa07aULL;
};

template<class ContainerAllocator>
struct DataType< ::pow_analyzer::Num_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pow_analyzer/Num";
  }

  static const char* value(const  ::pow_analyzer::Num_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pow_analyzer::Num_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 std_dev_yaw\n\
float64 std_dev_lin_v\n\
float64 avg_lin_v\n\
float64 dist_tot\n\
float64 dist_tot1\n\
float64 time\n\
float64 idle_time\n\
float64 min_range\n\
\n\
\n\
	\n\
\n\
";
  }

  static const char* value(const  ::pow_analyzer::Num_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::pow_analyzer::Num_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pow_analyzer::Num_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.std_dev_yaw);
    stream.next(m.std_dev_lin_v);
    stream.next(m.avg_lin_v);
    stream.next(m.dist_tot);
    stream.next(m.dist_tot1);
    stream.next(m.time);
    stream.next(m.idle_time);
    stream.next(m.min_range);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Num_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pow_analyzer::Num_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pow_analyzer::Num_<ContainerAllocator> & v) 
  {
    s << indent << "std_dev_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.std_dev_yaw);
    s << indent << "std_dev_lin_v: ";
    Printer<double>::stream(s, indent + "  ", v.std_dev_lin_v);
    s << indent << "avg_lin_v: ";
    Printer<double>::stream(s, indent + "  ", v.avg_lin_v);
    s << indent << "dist_tot: ";
    Printer<double>::stream(s, indent + "  ", v.dist_tot);
    s << indent << "dist_tot1: ";
    Printer<double>::stream(s, indent + "  ", v.dist_tot1);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "idle_time: ";
    Printer<double>::stream(s, indent + "  ", v.idle_time);
    s << indent << "min_range: ";
    Printer<double>::stream(s, indent + "  ", v.min_range);
  }
};


} // namespace message_operations
} // namespace ros

#endif // POW_ANALYZER_MESSAGE_NUM_H

